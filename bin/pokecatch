#!/bin/bash

# ============================================================================
# Script Directory Detection
# ============================================================================
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )"
GAME_ROOT="$(dirname "$SCRIPT_DIR")"

# Determine library and data directories
LIB_DIR="$GAME_ROOT/lib"
DATA_DIR="$GAME_ROOT/data"
mkdir -p "$DATA_DIR"

# ============================================================================
# Import Dependencies
# ============================================================================
source "$LIB_DIR/monster.sh"
source "$LIB_DIR/items.sh"
source "$LIB_DIR/status.sh"
source "$LIB_DIR/shop.sh"
source "$LIB_DIR/style.sh"

# ============================================================================
# Game Initialization
# ============================================================================
cd "$GAME_ROOT"  # Ensure we're in the game root directory
load_progress
load_pokedex

# ============================================================================
# Game Functions
# ============================================================================

# Display current inventory items
show_current_items() {
    echo -e "${CYAN}Current Items:${NC}"
    for item in "${!INVENTORY[@]}"; do
        if [ "${INVENTORY[$item]}" -gt 0 ]; then
            print_inventory_item "$item" "${INVENTORY[$item]}"
        fi
    done
    print_divider
}

# Handle the Safari Zone gameplay
safari() {
    local MONSTER_ENCOUNTERED=false
    local MONSTER_ANGRY=false
    local MONSTER_EATING=false
    local ANGRY_TURNS=0
    local EATING_TURNS=0
    local MONSTER_SPEED=0
    
    while true; do
        if [ "$MONSTER_ENCOUNTERED" = false ]; then
            print_header
            print_menu_option "1" "$SAFARI" "Look for Monster"
            print_menu_option "0" "$BACK" "Return to Main Menu"
            read -p "What will you do? " SAFARI_CHOICE
            
            case $SAFARI_CHOICE in
                1)
                    print_loading "Searching for Monster"
                    # 30% chance to encounter a Monster
                    if [ $((RANDOM % 100)) -lt 30 ]; then
                        MONSTER_ENCOUNTERED=true
                        get_random_monster
                        # Extract speed stat from monster stats
                        MONSTER_SPEED=$(echo "$MONSTER_STATS" | grep -o "speed: [0-9]*" | cut -d' ' -f2)
                    else
                        print_warning "You search the area but find no Monster..."
                    fi
                    ;;
                0)
                    print_success "You decide to go back to the main area."
                    return
                    ;;
                *)
                    print_error "Invalid choice. Please choose again."
                    ;;
            esac
        else
            print_divider
            print_menu_option "1" "$POKEBALL" "Throw Pokeball"
            print_menu_option "2" "$ROCK" "Throw Rock"
            print_menu_option "3" "$BAIT" "Throw Bait"
            print_menu_option "4" "$EXIT" "Run Away"
            read -p "What will you do? " SAFARI_CHOICE

            case $SAFARI_CHOICE in
                1)
                    throw_ball
                    local BALL_RESULT=$?
                    if [ $BALL_RESULT -eq 0 ]; then
                        MONSTER_ENCOUNTERED=false
                    elif [ $BALL_RESULT -eq 2 ]; then
                        print_warning "You need Pokeballs to catch Monster! Visit the shop to buy some."
                        print_menu_option "1" "$SHOP" "Go to Shop"
                        print_menu_option "0" "$BACK" "Stay Here"
                        read -p "What will you do? " SHOP_CHOICE
                        case $SHOP_CHOICE in
                            1)
                                show_shop "true"  # Pass true to return to encounter
                                # Return to monster encounter after shop
                                if [[ ${INVENTORY["Pokeball"]} -gt 0 ]]; then
                                    print_success "You return to the monster encounter with your new Pokeballs!"
                                    continue
                                fi
                                ;;
                            0)
                                print_success "You decide to stay and observe the Monster."
                                ;;
                            *)
                                print_error "Invalid choice. Staying here."
                                ;;
                        esac
                    fi
                    ;;
                2)
                    if [[ ${INVENTORY["Rock"]} -le 0 ]]; then
                        print_error "You don't have any Rocks left!"
                        print_menu_option "1" "$SHOP" "Go to Shop"
                        print_menu_option "2" "$EXIT" "Stay Here"
                        read -p "What will you do? " SHOP_CHOICE
                        case $SHOP_CHOICE in
                            1)
                                show_shop "true"  # Pass true to return to encounter
                                ;;
                            2)
                                print_success "You decide to stay and observe the Monster."
                                ;;
                            *)
                                print_error "Invalid choice. Staying here."
                                ;;
                        esac
                    else
                        INVENTORY["Rock"]=$((INVENTORY["Rock"] - 1))
                        save_progress
                        MONSTER_ANGRY=true
                        MONSTER_EATING=false
                        ANGRY_TURNS=$((RANDOM % 5 + 1))
                        EATING_TURNS=0
                        print_warning "The Monster is angry! It will be angry for $ANGRY_TURNS turns."
                    fi
                    ;;
                3)
                    if [[ ${INVENTORY["Bait"]} -le 0 ]]; then
                        print_error "You don't have any Bait left!"
                        print_menu_option "1" "$SHOP" "Go to Shop"
                        print_menu_option "2" "$EXIT" "Stay Here"
                        read -p "What will you do? " SHOP_CHOICE
                        case $SHOP_CHOICE in
                            1)
                                show_shop "true"  # Pass true to return to encounter
                                ;;
                            2)
                                print_success "You decide to stay and observe the Monster."
                                ;;
                            *)
                                print_error "Invalid choice. Staying here."
                                ;;
                        esac
                    else
                        INVENTORY["Bait"]=$((INVENTORY["Bait"] - 1))
                        save_progress
                        MONSTER_EATING=true
                        MONSTER_ANGRY=false
                        EATING_TURNS=$((RANDOM % 5 + 1))
                        ANGRY_TURNS=0
                        print_warning "The Monster is eating! It will be eating for $EATING_TURNS turns."
                    fi
                    ;;
                0)
                    print_warning "You ran away from the wild Monster."
                    MONSTER_ENCOUNTERED=false
                    MONSTER_ANGRY=false
                    MONSTER_EATING=false
                    ANGRY_TURNS=0
                    EATING_TURNS=0
                    ;;
                *)
                    print_error "Invalid choice. Please choose again."
                    ;;
            esac
            
            # Check if Monster flees (higher chance if angry, lower if eating)
            if [ "$MONSTER_ENCOUNTERED" = true ]; then
                # Don't let Monster flee if player has no Pokeballs
                if [[ ${INVENTORY["Pokeball"]} -le 0 ]]; then
                    print_warning "The Monster seems to be waiting for you to get some Pokeballs..."
                    continue
                fi

                # Base flee chance is based on Speed stat (higher speed = higher flee chance)
                local BASE_FLEE_CHANCE=$((MONSTER_SPEED / 2))
                
                # Modify flee chance based on status
                if [ "$MONSTER_ANGRY" = true ]; then
                    BASE_FLEE_CHANCE=$((BASE_FLEE_CHANCE * 2))
                    ANGRY_TURNS=$((ANGRY_TURNS - 1))
                    if [ $ANGRY_TURNS -le 0 ]; then
                        MONSTER_ANGRY=false
                        print_warning "The Monster is no longer angry."
                    fi
                elif [ "$MONSTER_EATING" = true ]; then
                    BASE_FLEE_CHANCE=$((BASE_FLEE_CHANCE / 4))
                    EATING_TURNS=$((EATING_TURNS - 1))
                    if [ $EATING_TURNS -le 0 ]; then
                        MONSTER_EATING=false
                        print_warning "The Monster is no longer eating."
                    fi
                fi
                
                if [ $((RANDOM % 100)) -lt $BASE_FLEE_CHANCE ]; then
                    print_warning "The wild Monster fled!"
                    # Increment fled counter
                    ENCOUNTER_STATS["fled"]=$((ENCOUNTER_STATS["fled"] + 1))
                    save_progress
                    MONSTER_ENCOUNTERED=false
                    MONSTER_ANGRY=false
                    MONSTER_EATING=false
                    ANGRY_TURNS=0
                    EATING_TURNS=0
                fi
            fi
        fi
    done
}

# ============================================================================
# Main Game Loop
# ============================================================================
while true; do
    print_header
    print_money
    print_divider
    show_current_items
    print_menu_option "1" "$SAFARI" "Enter Safari Zone"
    print_menu_option "2" "$POKEDEX" "View Pokédex"
    print_menu_option "3" "$STATUS" "Check Status"
    print_menu_option "4" "$SHOP" "Visit Shop"
    print_menu_option "0" "$EXIT" "Exit Game"
    read -p "What will you do? " CHOICE

    case $CHOICE in
        1)
            safari  # Enter the Safari Zone
            ;;
        2)
            show_pokedex  # View the Pokédex
            ;;
        3)
            show_status  # Check player status
            ;;
        4)
            show_shop "false"  # Visit the shop from main menu
            ;;
        0)
            print_success "Exiting the game. Goodbye!"
            save_progress  # Save game progress
            save_pokedex  # Save the Pokédex data
            exit 0
            ;;
        *)
            print_error "Invalid option. Please choose again."
            ;;
    esac
done
